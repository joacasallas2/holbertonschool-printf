.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "" "" "" "" ""
.hy
.PP
\&.TH _printf .PP .SH NAME:
.PD 0
.P
.PD
_printf: format and print data
.PP
\&.PP .SH SYNOPSIS:
.PD 0
.P
.PD
Customized Printf Function .br Project compiled on Ubuntu 20.04 LTS
using gcc, using the options -Wall -Werror -Wextra -pedantic -std=gnu89
.PP
\&.PP .SH Compilation
.PD 0
.P
.PD
$ gcc -Wall -Werror -Wextra -pedantic -std=gnu89 -Wno-format *.c .br .PP
\&.SH SYNTAX:
.PD 0
.P
.PD
int _printf(const char *format, \&...) The overall syntax of a
conversion specification is:
.PD 0
.P
.PD
%[$][flags][width][.precision][length modifier]conversion
.PD 0
.P
.PD
\&.br .PP .SH DESCRIPTION: Format of the format string: The format
string is a character string, which is composed of zero or more
directives (conversion specifications).
Each conversion specification is introduced by the character %, and ends
with a conversion specifier.
In between there may be (in this order) zero or more flags.
Summarizing, _printf function prints ARGUMENT(s) according to FORMAT, or
execute according to the conversion specifiers.
.PD 0
.P
.PD
\&.br .PP .SH OPTIONS:
.PD 0
.P
.PD
Conversion specifiers:
.PD 0
.P
.PD
A character that specifies the type of conversion to be applied.
The conversion specifiers and their meanings are:
.PD 0
.P
.PD
\&.br |Conversion Specifiers| |\[em]\[em]\[em]\[en]| |[i] | print an
integer in base 10| |[d] | print a decimal (base 10) number| |[o] |
print a number in octal (base 8)| |[u] | print an unsigned decimal (base
10) number| |[x] | print a number in hexidecimal (base 16).
The letters abcdef are used for x conversions| |[X] | print a number in
hexidecimal (base 16).
the letters ABCDEF are used for X conversions| |[b] | print a number in
octal (base 2)| |[c] | print a single character| |[s] | print a string
of characters.| |[%] | print a percent sign| .br .PP .SH RETURN VALUE:
.PD 0
.P
.PD
Upon successful return, these functions return the number of characters
printed (excluding the null byte used to end output to strings).
.PD 0
.P
.PD
\&.br .PP .SH EXAMPLES:
.IP
.nf
\f[C]
    To print a number in the simple way, the format specifier is simply %d.
    \[aq]#\[aq]include \[aq]\[dq]main.h\[dq]\[aq]
    int age;
    age = 25;
    printf ( \[dq]I am %d years old\[rs]n\[dq], age);
    Output = I am 25 years old  
\f[R]
.fi
.PP
\&.br |EXAMPLES| |\[em]\[em]\[em]\[en]| | _printf | Output |
|\[em]\[em]\[em]\[en]| |(\[lq]Negative:[%d]\[rq], -762534) |
Negative:[-762534]| |(\[lq]Unsigned:[%u]\[rq], ui) |
Unsigned:[2147484671]| |(\[lq]Character:[%c]\[rq], `H') | Character:[H]|
|(\[lq]String:[%s]\[rq], \[lq]I am a string !\[rq]) | String:[I am a
string !]| |(\[lq]Percent:[%%]\[rq]) | Percent:[%]| |(\[lq]HEX:
[%X]\[rq], 1024) | HEX: [BA2A6]| |(\[lq]binary: [%b]\[rq], 1024) |
binary: [10000000000]| .br .PP .SH FILES .br |Files|
|\[em]\[em]\[em]\[en]| |1.
main.h (https://github.com/joacasallas2/holbertonschool-printf/tree/main/main.h)|
|2.
_printf.c (https://github.com/joacasallas2/holbertonschool-printf/tree/main/printFunction.c)|
|3.
get_op_fun.c (https://github.com/joacasallas2/holbertonschool-printf/tree/main/get_function.c)|
|4.
functions.c (https://github.com/joacasallas2/holbertonschool-printf/tree/main/functions.c)|
.PD 0
.P
.PD
|5.
functions2.c (https://github.com/joacasallas2/holbertonschool-printf/tree/main/functions2.c)|
.PD 0
.P
.PD
|6.
_putchar.c (https://github.com/joacasallas2/holbertonschool-printf/tree/main/_putchar.c)|
.PD 0
.P
.PD
|7.
man_3_printf (https://github.com/joacasallas2/holbertonschool-printf/tree/main/man_3_printf)|
.PP
\&.br .PP .SH Autor: joacasallas
.PD 0
.P
.PD
contact: joacasallas\[at]gmail.com
.PD 0
.P
.PD
\&.br
